package Polinom;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;

public class PaintLagrange extends Lagrange{
	
public ArrayList<double[]> ArrList = new ArrayList<double[]>();

void  GetLagrange(){
	   double [][]Uzly= new double [2][ArrList.size()];//список узлов берем и перезаписываем все узлы в двумерный массиив, чтобы использовать метод гетлагранж
	   for (int i =0; i<ArrList.size();i++){
		   Uzly[0][i]=ArrList.get(i)[0];
		   Uzly[1][i]=ArrList.get(i)[1];   
	  }
	   Lagrange lagr= new Lagrange (Uzly);
	   coef=new double[lagr.coef.length];
	   for(int i=0;i<(lagr.coef.length);i++){
		   coef[i]=lagr.coef[i];
	   }
}

   public void AddNodes (double x, double y){
	   double [] tmp=new double [2];
	   tmp[0]=x;
	   tmp[1]=y;
	   for(int i=0; i<ArrList.size(); i++){
		   if(x==ArrList.get(i)[0]){
			   ArrList.remove(i);
			   ArrList.add(i,tmp);
			   return;
		   }
		   if(x<ArrList.get(i)[0]){
			   ArrList.add(i,tmp);
			   return;
		   }	   
	   }
	   if(!ArrList.contains(tmp))ArrList.add(tmp);
   }
   
	void ShowNodes(Graphics g,double xmin,double xmax,double ymin,double ymax,int W,int H){
		g.setColor(Color.BLACK);
		Converter con = new Converter(xmin,xmax,ymin,ymax,W,H);
		for(int i=0;i<ArrList.size();i++){
			int px = con.XtoPx(ArrList.get(i)[0]);
			int py = con.YtoPy(ArrList.get(i)[1]);
			g.fillOval(px-2, py-2, 6, 6);
		}
	}
	
	void ShowLagrange(Graphics g,double xmin,double xmax,double ymin,double ymax,int W,int H){
		if(ArrList.size() < 2) return;
		Converter con = new Converter(xmin,xmax,ymin,ymax,W,H);
		int min,max;
		min = con.XtoPx(ArrList.get(0)[0]);			
		max = con.XtoPx(ArrList.get(ArrList.size()-1)[0]);
		for(int i=min;i<max;i++){			
			int y1 = con.YtoPy(ZnT(con.PxtoX(i)));
			int y2 = con.YtoPy(ZnT(con.PxtoX(i+1)));
			g.setColor(Color.BLACK);
			g.drawLine(i + 1, y1, i + 1, y2);
		}
	}
}
